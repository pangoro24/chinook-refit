<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Refit</name>
    </assembly>
    <members>
        <member name="F:Refit.BodySerializationMethod.Default">
            <summary>
            Encodes everything using the ContentSerializer in RefitSettings except for strings. Strings are set as-is
            </summary>
        </member>
        <member name="F:Refit.BodySerializationMethod.Json">
            <summary>
            Json encodes everything, including strings
            </summary>
        </member>
        <member name="F:Refit.BodySerializationMethod.UrlEncoded">
            <summary>
            Form-UrlEncode's the values
            </summary>
        </member>
        <member name="F:Refit.BodySerializationMethod.Serialized">
            <summary>
            Encodes everything using the ContentSerializer in RefitSettings 
            </summary>
        </member>
        <member name="T:Refit.CollectionFormat">
            <summary>
            Collection format defined in https://swagger.io/docs/specification/2-0/describing-parameters/ 
            </summary>
        </member>
        <member name="F:Refit.CollectionFormat.RefitParameterFormatter">
            <summary>
            Values formatted with <see cref="P:Refit.RefitSettings.UrlParameterFormatter"/> or
            <see cref="P:Refit.RefitSettings.FormUrlEncodedParameterFormatter"/>.
            </summary>
        </member>
        <member name="F:Refit.CollectionFormat.Csv">
            <summary>
            Comma-separated values
            </summary>
        </member>
        <member name="F:Refit.CollectionFormat.Ssv">
            <summary>
            Space-separated values
            </summary>
        </member>
        <member name="F:Refit.CollectionFormat.Tsv">
            <summary>
            Tab-separated values
            </summary>
        </member>
        <member name="F:Refit.CollectionFormat.Pipes">
            <summary>
            Pipe-separated values
            </summary>
        </member>
        <member name="F:Refit.CollectionFormat.Multi">
            <summary>
            Multiple parameter instances
            </summary>
        </member>
        <member name="P:Refit.QueryAttribute.Delimiter">
            <summary>
            Used to customize the name of either the query parameter pair or of the form field when form encoding.
            </summary>
            <seealso cref="P:Refit.QueryAttribute.Prefix"/>
        </member>
        <member name="P:Refit.QueryAttribute.Prefix">
            <summary>
            Used to customize the name of the encoded value.  
            </summary>
            <remarks>
            Gets combined with <see cref="P:Refit.QueryAttribute.Delimiter"/> in the format <code>var name = $"{Prefix}{Delimiter}{originalFieldName}"</code>
            where <c>originalFieldName</c> is the name of the object property or method parameter.
            </remarks>
            <example>
            <code>
            class Form
            {
              [Query("-", "dontlog")]
              public string password { get; }
            }
            </code>
            will result in the encoded form having a field named <c>dontlog-password</c>.
            </example>
        </member>
        <member name="P:Refit.QueryAttribute.Format">
            <summary>
            Used to customize the formatting of the encoded value.
            </summary>
            <example>
            <code>
            interface IServerApi
            {
              [Get("/expenses")]
              Task addExpense([Query(Format="0.00")] double expense);
            }
            </code>
            Calling <c>serverApi.addExpense(5)</c> will result in a URI of <c>{baseUri}/expenses?expense=5.00</c>.
            </example>
        </member>
        <member name="P:Refit.QueryAttribute.CollectionFormat">
            <summary>
            Specifies how the collection should be encoded. The default behavior is <c>RefitParameterFormatter</c>.
            </summary>
        </member>
        <member name="T:Refit.FormValueMultimap">
            <summary>
            Transforms a form source from a .NET representation to the appropriate HTTP form encoded representation.
            </summary>
            <remarks>Performs field renaming and value formatting as specified in <see cref="T:Refit.QueryAttribute"/>s and
            <see cref="P:Refit.RefitSettings.FormUrlEncodedParameterFormatter"/>. A given key may appear multiple times with the
            same or different values.</remarks>
        </member>
        <member name="P:Refit.FormValueMultimap.Keys">
            <summary>
            Returns a key for each entry. If multiple entries share the same key, the key is returned multiple times.
            </summary>
        </member>
        <member name="T:Refit.ProblemDetails">
            <summary>
            The object representing the details about a ValidationException caught by a service implementing RFC 7807.
            </summary>
        </member>
        <member name="P:Refit.ProblemDetails.Errors">
            <summary>
            Collection of resulting errors for the request.
            </summary>
        </member>
        <member name="P:Refit.ProblemDetails.Type">
            <summary>
            A URI reference that identifies the problem type.
            </summary>
        </member>
        <member name="P:Refit.ProblemDetails.Title">
            <summary>
            A short, human-readable summary of the problem type.
            </summary>
        </member>
        <member name="P:Refit.ProblemDetails.Status">
            <summary>
            The HTTP status code generated by the origin server for this occurrence of the problem.
            </summary>
        </member>
        <member name="P:Refit.ProblemDetails.Detail">
            <summary>
            A human-readable explanation specific to this occurrence of the problem.
            </summary>
        </member>
        <member name="P:Refit.ProblemDetails.Instance">
            <summary>
            A URI reference that identifies the specific occurrence of the problem.
            </summary>
        </member>
        <member name="T:Refit.ValidationApiException">
            <summary>
            An ApiException that is raised according to RFC 7807, which contains problem details for validation exceptions.
            </summary>
        </member>
        <member name="M:Refit.ValidationApiException.Create(Refit.ApiException)">
            <summary>
            Creates a new instance of a ValidationException from an existing ApiException.
            </summary>
            <param name="exception">An instance of an ApiException to use to build a ValidationException.</param>
            <returns>ValidationApiException</returns>
        </member>
        <member name="P:Refit.ValidationApiException.Content">
            <summary>
            The problem details of the RFC 7807 validation exception.
            </summary>
        </member>
        <member name="M:Refit.XmlReaderWriterSettings.ApplyOverrideSettings">
            <summary>
            The writer and reader settings are set by the caller, but certain properties
            should remain set to meet the demands of the XmlContentSerializer. Those properties
            are always set here.
            </summary>
        </member>
        <member name="T:System.Net.Http.PushStreamContent">
            <summary>
            Provides an <see cref="T:System.Net.Http.HttpContent"/> implementation that exposes an output <see cref="T:System.IO.Stream"/>
            which can be written to directly. The ability to push data to the output stream differs from the 
            <see cref="T:System.Net.Http.StreamContent"/> where data is pulled and not pushed.
            </summary>
        </member>
        <member name="M:System.Net.Http.PushStreamContent.#ctor(System.Action{System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.PushStreamContent"/> class. The
            <paramref name="onStreamAvailable"/> action is called when an output stream
            has become available allowing the action to write to it directly. When the 
            stream is closed, it will signal to the content that is has completed and the 
            HTTP request or response will be completed.
            </summary>
            <param name="onStreamAvailable">The action to call when an output stream is available.</param>
        </member>
        <member name="M:System.Net.Http.PushStreamContent.#ctor(System.Func{System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext,System.Threading.Tasks.Task})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.PushStreamContent"/> class. 
            </summary>
            <param name="onStreamAvailable">The action to call when an output stream is available. The stream is automatically
            closed when the return task is completed.</param>
        </member>
        <member name="M:System.Net.Http.PushStreamContent.#ctor(System.Action{System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.PushStreamContent"/> class with the given media type.
            </summary>
        </member>
        <member name="M:System.Net.Http.PushStreamContent.#ctor(System.Func{System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext,System.Threading.Tasks.Task},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.PushStreamContent"/> class with the given media type.
            </summary>
        </member>
        <member name="M:System.Net.Http.PushStreamContent.#ctor(System.Action{System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext},System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.PushStreamContent"/> class with the given <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/>.
            </summary>
        </member>
        <member name="M:System.Net.Http.PushStreamContent.#ctor(System.Func{System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext,System.Threading.Tasks.Task},System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.PushStreamContent"/> class with the given <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/>.
            </summary>
        </member>
        <member name="T:System.Net.Http.PushStreamContent.AsyncVoid">
            <summary>
            Used as the T in a "conversion" of a Task into a Task{T}
            </summary>
        </member>
        <member name="M:System.Net.Http.PushStreamContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
            <summary>
            When this method is called, it calls the action provided in the constructor with the output 
            stream to write to. Once the action has completed its work it closes the stream which will 
            close this content instance and complete the HTTP request or response.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to which to write.</param>
            <param name="context">The associated <see cref="T:System.Net.TransportContext"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> instance that is asynchronously serializing the object's content.</returns>
        </member>
        <member name="M:System.Net.Http.PushStreamContent.TryComputeLength(System.Int64@)">
            <summary>
            Computes the length of the stream if possible.
            </summary>
            <param name="length">The computed length of the stream.</param>
            <returns><c>true</c> if the length has been computed; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:System.Net.Http.DelegatingStream">
            <summary>
            Stream that delegates to inner stream. 
            This is taken from System.Net.Http
            </summary>
        </member>
    </members>
</doc>
